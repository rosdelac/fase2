#count
#Ejemplo cuenta vocales
texto="Texto de prueba"
texto.count("aeiou")
#=>6

#cycle
#Ejemplo cronómetro (un minuto)
arre=(1..10).to_a
arre.cycle(6){|x|
print "#{x}, "    
sleep(1)}

#drop_while
#Problema
#Tenemos un arreglo oredenado con las edades de nuestros estudiantes
#Queremos quedarnos con los esyudiantes que son mayores e edad. 
students=[[10,"Alfonso"],[12, "María"],[18,"Juan"]]
students_mayores=students.drop_while{|x,y| x<18}
p students
p students_mayores

#find_all
#Problema
#Tenemos un arreglo no ordenado con las edades de nuestros estudiantes
#Queremos quedarnos con los esyudiantes que son mayores e edad. 
students=[[10,"Alfonso"],[12, "María"],[18,"Juan"],[11, "Mariana"]]
students_mayores=students.find_all{|x,y| x>=18}
p students
p students_mayores

#group_by
#Problema
#Dado un arreglo del 0 al 100, encuentra los numeros pares. 
arre=(0..100).to_a
p even=arre.group_by{|x| x.even?}[true]

#member?
#Problema
#Dado una lista de asistencia, determinar si X estudiante está presente o ausente. 
students_present = ["pablo", "pedro", "rodrigo", "max", "hector"]
p students_present.member?("pablo") ? "Presente" : "Ausente"
p students_present.member?("yamir") ? "Presente" : "Ausente"

#sort_by
#Problema
#Ordena una lista de nombres por los apellidos
students_present =["Pablo Ramirez", "Pedro Marinez", "Rodrigo Sierra", "Max Olac", "Hector Perez"]
p students_present.sort_by{|x|x.scan(/\w+/)[1].chars[0]}

# Dado un array de números imprime únicamente los elementos que contienen un indice impar
# Utiliza: Enumerable#each_with_index
def print_odd_indexed_integers(array)
  array.each_with_index{|item,index| puts item if index % 2 != 0}
end

# Dado un array de números regresa un array con solo los numeros impares
# Utiliza: Enumerable#select
def odd_integers(array)
  array.select{|num| num.odd?}
end

# Dado un array y un límite regresa el primer numero que sea menor al límite 
# Utiliza: Enumerable#find
def first_under(array, limit)
  array.find{|x|x<limit}
end


# Dado un array de strings y regresa un nuevo array donde todos los elementos contengan al final un signo de admiración. 
# Utiliza: Enumerable#map
def add_bang(array)
  array.map { |e| e+"!"  }
end

# Dado un array de números calcula la suma de todos sus elementos. 
# Utiliza: Enumerable#reduce
# Repite el ejercicio con Enumerable#inject
def sum(array)
  array.reduce(:+)
  array.inject(:+)
end


# Dado un array de string reorganizalo en grupos de tres y ordénalos alfabéticamente.  
# Utiliza: Enumerable#each_slice
def sorted_triples(array)
  arre=[]
  array.each_slice(3){|x| arre << x.sort}
  arre
end

# Driver code... no modifiques nada de este código 
print_odd_indexed_integers([2, 4, 6, 8, 10, 12]) 
# # => 4
# # => 8
# # => 12

puts odd_integers([3, 4, 7, 9, 10, 16])== [3, 7, 9]

puts first_under([13, 21, 7, 0, 11, 106], 10) == 7

puts add_bang(["hi", "mom"]) == ["hi!", "mom!"]

puts sum([1, 1, 2, 3, 5]) == 12

words = %w(De esta simple manera se puede reorganizar una oración)  
 p sorted_triples(words) == [["De", "esta", "simple"], ["manera", "puede", "se"], ["oración", "reorganizar", "una"]]                 
